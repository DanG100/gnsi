// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: github.com/openconfig/gnsi/certz/certz.proto

package cert

import (
	_ "github.com/openconfig/gnoi/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSRSuite int32

const (
	CSRSuite_CSRSUITE_CIPHER_UNSPECIFIED                                           CSRSuite = 0
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_256         CSRSuite = 1
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_384         CSRSuite = 2
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_512         CSRSuite = 3
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_256         CSRSuite = 4
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_384         CSRSuite = 5
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_512         CSRSuite = 6
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_256         CSRSuite = 7
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_384         CSRSuite = 8
	CSRSuite_CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_512         CSRSuite = 9
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_256 CSRSuite = 10
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_384 CSRSuite = 11
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_512 CSRSuite = 12
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_256  CSRSuite = 13
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_384  CSRSuite = 14
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_512  CSRSuite = 15
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_256  CSRSuite = 16
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_384  CSRSuite = 17
	CSRSuite_CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_512  CSRSuite = 18
	CSRSuite_CSRSUITE_X509_KEY_TYPE_EDDSA_ED25519                                  CSRSuite = 19
)

// Enum value maps for CSRSuite.
var (
	CSRSuite_name = map[int32]string{
		0:  "CSRSUITE_CIPHER_UNSPECIFIED",
		1:  "CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_256",
		2:  "CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_384",
		3:  "CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_512",
		4:  "CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_256",
		5:  "CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_384",
		6:  "CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_512",
		7:  "CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_256",
		8:  "CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_384",
		9:  "CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_512",
		10: "CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_256",
		11: "CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_384",
		12: "CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_512",
		13: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_256",
		14: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_384",
		15: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_512",
		16: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_256",
		17: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_384",
		18: "CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_512",
		19: "CSRSUITE_X509_KEY_TYPE_EDDSA_ED25519",
	}
	CSRSuite_value = map[string]int32{
		"CSRSUITE_CIPHER_UNSPECIFIED":                                           0,
		"CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_256":         1,
		"CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_384":         2,
		"CSRSUITE_X509_KEY_TYPE_RSA_2048_SIGNATURE_ALGORITHM_SHA_2_512":         3,
		"CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_256":         4,
		"CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_384":         5,
		"CSRSUITE_X509_KEY_TYPE_RSA_3072_SIGNATURE_ALGORITHM_SHA_2_512":         6,
		"CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_256":         7,
		"CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_384":         8,
		"CSRSUITE_X509_KEY_TYPE_RSA_4096_SIGNATURE_ALGORITHM_SHA_2_512":         9,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_256": 10,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_384": 11,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_PRIME256V1_SIGNATURE_ALGORITHM_SHA_2_512": 12,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_256":  13,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_384":  14,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP384R1_SIGNATURE_ALGORITHM_SHA_2_512":  15,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_256":  16,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_384":  17,
		"CSRSUITE_X509_KEY_TYPE_ECDSA_SECP521R1_SIGNATURE_ALGORITHM_SHA_2_512":  18,
		"CSRSUITE_X509_KEY_TYPE_EDDSA_ED25519":                                  19,
	}
)

func (x CSRSuite) Enum() *CSRSuite {
	p := new(CSRSuite)
	*p = x
	return p
}

func (x CSRSuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSRSuite) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[0].Descriptor()
}

func (CSRSuite) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[0]
}

func (x CSRSuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CSRSuite.Descriptor instead.
func (CSRSuite) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{0}
}

type CertificateType int32

const (
	CertificateType_CERTIFICATE_TYPE_UNSPECIFIED CertificateType = 0
	CertificateType_CERTIFICATE_TYPE_X509        CertificateType = 1
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "CERTIFICATE_TYPE_UNSPECIFIED",
		1: "CERTIFICATE_TYPE_X509",
	}
	CertificateType_value = map[string]int32{
		"CERTIFICATE_TYPE_UNSPECIFIED": 0,
		"CERTIFICATE_TYPE_X509":        1,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[1].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[1]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{1}
}

type CertificateEncoding int32

const (
	CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED CertificateEncoding = 0
	CertificateEncoding_CERTIFICATE_ENCODING_PEM         CertificateEncoding = 1
	CertificateEncoding_CERTIFICATE_ENCODING_DER         CertificateEncoding = 2
	CertificateEncoding_CERTIFICATE_ENCODING_CRT         CertificateEncoding = 3
)

// Enum value maps for CertificateEncoding.
var (
	CertificateEncoding_name = map[int32]string{
		0: "CERTIFICATE_ENCODING_UNSPECIFIED",
		1: "CERTIFICATE_ENCODING_PEM",
		2: "CERTIFICATE_ENCODING_DER",
		3: "CERTIFICATE_ENCODING_CRT",
	}
	CertificateEncoding_value = map[string]int32{
		"CERTIFICATE_ENCODING_UNSPECIFIED": 0,
		"CERTIFICATE_ENCODING_PEM":         1,
		"CERTIFICATE_ENCODING_DER":         2,
		"CERTIFICATE_ENCODING_CRT":         3,
	}
)

func (x CertificateEncoding) Enum() *CertificateEncoding {
	p := new(CertificateEncoding)
	*p = x
	return p
}

func (x CertificateEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[2].Descriptor()
}

func (CertificateEncoding) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes[2]
}

func (x CertificateEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateEncoding.Descriptor instead.
func (CertificateEncoding) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{2}
}

type RotateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceOverwrite bool `protobuf:"varint,1,opt,name=force_overwrite,json=forceOverwrite,proto3" json:"force_overwrite,omitempty"`
	// Types that are assignable to RotateRequest:
	//	*RotateCertificateRequest_GenerateCsr
	//	*RotateCertificateRequest_Certificates
	//	*RotateCertificateRequest_FinalizeRotation
	RotateRequest isRotateCertificateRequest_RotateRequest `protobuf_oneof:"rotate_request"`
}

func (x *RotateCertificateRequest) Reset() {
	*x = RotateCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertificateRequest) ProtoMessage() {}

func (x *RotateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertificateRequest.ProtoReflect.Descriptor instead.
func (*RotateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{0}
}

func (x *RotateCertificateRequest) GetForceOverwrite() bool {
	if x != nil {
		return x.ForceOverwrite
	}
	return false
}

func (m *RotateCertificateRequest) GetRotateRequest() isRotateCertificateRequest_RotateRequest {
	if m != nil {
		return m.RotateRequest
	}
	return nil
}

func (x *RotateCertificateRequest) GetGenerateCsr() *GenerateCSRRequest {
	if x, ok := x.GetRotateRequest().(*RotateCertificateRequest_GenerateCsr); ok {
		return x.GenerateCsr
	}
	return nil
}

func (x *RotateCertificateRequest) GetCertificates() *UploadRequest {
	if x, ok := x.GetRotateRequest().(*RotateCertificateRequest_Certificates); ok {
		return x.Certificates
	}
	return nil
}

func (x *RotateCertificateRequest) GetFinalizeRotation() *FinalizeRequest {
	if x, ok := x.GetRotateRequest().(*RotateCertificateRequest_FinalizeRotation); ok {
		return x.FinalizeRotation
	}
	return nil
}

type isRotateCertificateRequest_RotateRequest interface {
	isRotateCertificateRequest_RotateRequest()
}

type RotateCertificateRequest_GenerateCsr struct {
	GenerateCsr *GenerateCSRRequest `protobuf:"bytes,2,opt,name=generate_csr,json=generateCsr,proto3,oneof"`
}

type RotateCertificateRequest_Certificates struct {
	Certificates *UploadRequest `protobuf:"bytes,3,opt,name=certificates,proto3,oneof"`
}

type RotateCertificateRequest_FinalizeRotation struct {
	FinalizeRotation *FinalizeRequest `protobuf:"bytes,4,opt,name=finalize_rotation,json=finalizeRotation,proto3,oneof"`
}

func (*RotateCertificateRequest_GenerateCsr) isRotateCertificateRequest_RotateRequest() {}

func (*RotateCertificateRequest_Certificates) isRotateCertificateRequest_RotateRequest() {}

func (*RotateCertificateRequest_FinalizeRotation) isRotateCertificateRequest_RotateRequest() {}

type RotateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RotateResponse:
	//	*RotateCertificateResponse_GeneratedCsr
	//	*RotateCertificateResponse_Certificates
	RotateResponse isRotateCertificateResponse_RotateResponse `protobuf_oneof:"rotate_response"`
}

func (x *RotateCertificateResponse) Reset() {
	*x = RotateCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateCertificateResponse) ProtoMessage() {}

func (x *RotateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateCertificateResponse.ProtoReflect.Descriptor instead.
func (*RotateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{1}
}

func (m *RotateCertificateResponse) GetRotateResponse() isRotateCertificateResponse_RotateResponse {
	if m != nil {
		return m.RotateResponse
	}
	return nil
}

func (x *RotateCertificateResponse) GetGeneratedCsr() *GenerateCSRResponse {
	if x, ok := x.GetRotateResponse().(*RotateCertificateResponse_GeneratedCsr); ok {
		return x.GeneratedCsr
	}
	return nil
}

func (x *RotateCertificateResponse) GetCertificates() *UploadResponse {
	if x, ok := x.GetRotateResponse().(*RotateCertificateResponse_Certificates); ok {
		return x.Certificates
	}
	return nil
}

type isRotateCertificateResponse_RotateResponse interface {
	isRotateCertificateResponse_RotateResponse()
}

type RotateCertificateResponse_GeneratedCsr struct {
	GeneratedCsr *GenerateCSRResponse `protobuf:"bytes,1,opt,name=generated_csr,json=generatedCsr,proto3,oneof"`
}

type RotateCertificateResponse_Certificates struct {
	Certificates *UploadResponse `protobuf:"bytes,2,opt,name=certificates,proto3,oneof"`
}

func (*RotateCertificateResponse_GeneratedCsr) isRotateCertificateResponse_RotateResponse() {}

func (*RotateCertificateResponse_Certificates) isRotateCertificateResponse_RotateResponse() {}

type FinalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinalizeRequest) Reset() {
	*x = FinalizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRequest) ProtoMessage() {}

func (x *FinalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{2}
}

type CSRParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CsrSuite CSRSuite `protobuf:"varint,1,opt,name=csr_suite,json=csrSuite,proto3,enum=gnsi.certz.CSRSuite" json:"csr_suite,omitempty"`
}

func (x *CSRParams) Reset() {
	*x = CSRParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRParams) ProtoMessage() {}

func (x *CSRParams) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRParams.ProtoReflect.Descriptor instead.
func (*CSRParams) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{3}
}

func (x *CSRParams) GetCsrSuite() CSRSuite {
	if x != nil {
		return x.CsrSuite
	}
	return CSRSuite_CSRSUITE_CIPHER_UNSPECIFIED
}

type CanGenerateCSRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *CSRParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CanGenerateCSRRequest) Reset() {
	*x = CanGenerateCSRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanGenerateCSRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateCSRRequest) ProtoMessage() {}

func (x *CanGenerateCSRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateCSRRequest.ProtoReflect.Descriptor instead.
func (*CanGenerateCSRRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{4}
}

func (x *CanGenerateCSRRequest) GetParams() *CSRParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type CanGenerateCSRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanGenerate bool `protobuf:"varint,4,opt,name=can_generate,json=canGenerate,proto3" json:"can_generate,omitempty"`
}

func (x *CanGenerateCSRResponse) Reset() {
	*x = CanGenerateCSRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanGenerateCSRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanGenerateCSRResponse) ProtoMessage() {}

func (x *CanGenerateCSRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanGenerateCSRResponse.ProtoReflect.Descriptor instead.
func (*CanGenerateCSRResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{5}
}

func (x *CanGenerateCSRResponse) GetCanGenerate() bool {
	if x != nil {
		return x.CanGenerate
	}
	return false
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        CertificateType     `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.CertificateType" json:"type,omitempty"`
	Encoding    CertificateEncoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.CertificateEncoding" json:"encoding,omitempty"`
	Certificate []byte              `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PrivateKey  []byte              `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{6}
}

func (x *Certificate) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *Certificate) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *Certificate) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Certificate) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type CertificateBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *CertificateBundle) Reset() {
	*x = CertificateBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateBundle) ProtoMessage() {}

func (x *CertificateBundle) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateBundle.ProtoReflect.Descriptor instead.
func (*CertificateBundle) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{7}
}

func (x *CertificateBundle) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type CertificateRevocationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      CertificateType     `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.CertificateType" json:"type,omitempty"`
	Encoding                  CertificateEncoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.CertificateEncoding" json:"encoding,omitempty"`
	CertificateRevocationList []byte              `protobuf:"bytes,3,opt,name=certificate_revocation_list,json=certificateRevocationList,proto3" json:"certificate_revocation_list,omitempty"`
	Id                        string              `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CertificateRevocationList) Reset() {
	*x = CertificateRevocationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRevocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRevocationList) ProtoMessage() {}

func (x *CertificateRevocationList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRevocationList.ProtoReflect.Descriptor instead.
func (*CertificateRevocationList) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{8}
}

func (x *CertificateRevocationList) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CertificateRevocationList) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *CertificateRevocationList) GetCertificateRevocationList() []byte {
	if x != nil {
		return x.CertificateRevocationList
	}
	return nil
}

func (x *CertificateRevocationList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CertificateRevocationListBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateRevocationLists []*CertificateRevocationList `protobuf:"bytes,1,rep,name=certificate_revocation_lists,json=certificateRevocationLists,proto3" json:"certificate_revocation_lists,omitempty"`
}

func (x *CertificateRevocationListBundle) Reset() {
	*x = CertificateRevocationListBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRevocationListBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRevocationListBundle) ProtoMessage() {}

func (x *CertificateRevocationListBundle) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRevocationListBundle.ProtoReflect.Descriptor instead.
func (*CertificateRevocationListBundle) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{9}
}

func (x *CertificateRevocationListBundle) GetCertificateRevocationLists() []*CertificateRevocationList {
	if x != nil {
		return x.CertificateRevocationLists
	}
	return nil
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CreatedOn uint64 `protobuf:"varint,2,opt,name=created_on,json=createdOn,proto3" json:"created_on,omitempty"`
	// Types that are assignable to Entity:
	//	*Entity_Certificate
	//	*Entity_TrustBundle
	//	*Entity_CertificateRevocationListBundle
	Entity isEntity_Entity `protobuf_oneof:"entity"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{10}
}

func (x *Entity) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Entity) GetCreatedOn() uint64 {
	if x != nil {
		return x.CreatedOn
	}
	return 0
}

func (m *Entity) GetEntity() isEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *Entity) GetCertificate() *Certificate {
	if x, ok := x.GetEntity().(*Entity_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (x *Entity) GetTrustBundle() *CertificateBundle {
	if x, ok := x.GetEntity().(*Entity_TrustBundle); ok {
		return x.TrustBundle
	}
	return nil
}

func (x *Entity) GetCertificateRevocationListBundle() *CertificateRevocationListBundle {
	if x, ok := x.GetEntity().(*Entity_CertificateRevocationListBundle); ok {
		return x.CertificateRevocationListBundle
	}
	return nil
}

type isEntity_Entity interface {
	isEntity_Entity()
}

type Entity_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,3,opt,name=certificate,proto3,oneof"`
}

type Entity_TrustBundle struct {
	TrustBundle *CertificateBundle `protobuf:"bytes,4,opt,name=trust_bundle,json=trustBundle,proto3,oneof"`
}

type Entity_CertificateRevocationListBundle struct {
	CertificateRevocationListBundle *CertificateRevocationListBundle `protobuf:"bytes,5,opt,name=certificate_revocation_list_bundle,json=certificateRevocationListBundle,proto3,oneof"`
}

func (*Entity_Certificate) isEntity_Entity() {}

func (*Entity_TrustBundle) isEntity_Entity() {}

func (*Entity_CertificateRevocationListBundle) isEntity_Entity() {}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{11}
}

func (x *UploadRequest) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{12}
}

type CertificateSigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      CertificateType     `protobuf:"varint,1,opt,name=type,proto3,enum=gnsi.certz.CertificateType" json:"type,omitempty"`
	Encoding                  CertificateEncoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=gnsi.certz.CertificateEncoding" json:"encoding,omitempty"`
	CertificateSigningRequest []byte              `protobuf:"bytes,3,opt,name=certificate_signing_request,json=certificateSigningRequest,proto3" json:"certificate_signing_request,omitempty"`
}

func (x *CertificateSigningRequest) Reset() {
	*x = CertificateSigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateSigningRequest) ProtoMessage() {}

func (x *CertificateSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateSigningRequest.ProtoReflect.Descriptor instead.
func (*CertificateSigningRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{13}
}

func (x *CertificateSigningRequest) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CertificateSigningRequest) GetEncoding() CertificateEncoding {
	if x != nil {
		return x.Encoding
	}
	return CertificateEncoding_CERTIFICATE_ENCODING_UNSPECIFIED
}

func (x *CertificateSigningRequest) GetCertificateSigningRequest() []byte {
	if x != nil {
		return x.CertificateSigningRequest
	}
	return nil
}

type GenerateCSRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *CSRParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GenerateCSRRequest) Reset() {
	*x = GenerateCSRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRRequest) ProtoMessage() {}

func (x *GenerateCSRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRRequest.ProtoReflect.Descriptor instead.
func (*GenerateCSRRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateCSRRequest) GetParams() *CSRParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GenerateCSRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateSigningRequest *CertificateSigningRequest `protobuf:"bytes,1,opt,name=certificate_signing_request,json=certificateSigningRequest,proto3" json:"certificate_signing_request,omitempty"`
}

func (x *GenerateCSRResponse) Reset() {
	*x = GenerateCSRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateCSRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCSRResponse) ProtoMessage() {}

func (x *GenerateCSRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCSRResponse.ProtoReflect.Descriptor instead.
func (*GenerateCSRResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateCSRResponse) GetCertificateSigningRequest() *CertificateSigningRequest {
	if x != nil {
		return x.CertificateSigningRequest
	}
	return nil
}

var File_github_com_openconfig_gnsi_certz_certz_proto protoreflect.FileDescriptor

var file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x73, 0x69, 0x2f, 0x63, 0x65, 0x72,
	0x74, 0x7a, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x02, 0x0a, 0x18, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x43,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x73, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x7a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x73, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x73,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63,
	0x65, 0x72, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x73, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a,
	0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3e, 0x0a, 0x09, 0x43, 0x53, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x63, 0x73, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x53,
	0x52, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x08, 0x63, 0x73, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x22, 0x46, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x53, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3b, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x19, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74,
	0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x73, 0x69,
	0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x22, 0xc8, 0x02, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e,
	0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x7a, 0x0a, 0x22, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x1f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3f, 0x0a, 0x0d,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x10, 0x0a,
	0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xc9, 0x01, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6e,
	0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43,
	0x53, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0xcd,
	0x0a, 0x0a, 0x08, 0x43, 0x53, 0x52, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x3d,
	0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12,
	0x41, 0x0a, 0x3d, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x32, 0x30,
	0x34, 0x38, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x33, 0x38, 0x34,
	0x10, 0x02, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58,
	0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41,
	0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f,
	0x35, 0x31, 0x32, 0x10, 0x03, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54,
	0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x53, 0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x04, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x53, 0x52, 0x53,
	0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x05, 0x12, 0x41, 0x0a, 0x3d, 0x43,
	0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x06, 0x12, 0x41,
	0x0a, 0x3d, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x34, 0x30, 0x39,
	0x36, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10,
	0x07, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35,
	0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x34, 0x30, 0x39, 0x36, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x33,
	0x38, 0x34, 0x10, 0x08, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45,
	0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x53, 0x41, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f,
	0x32, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x09, 0x12, 0x49, 0x0a, 0x45, 0x43, 0x53, 0x52, 0x53, 0x55,
	0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x32, 0x35, 0x36,
	0x56, 0x31, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x32, 0x35, 0x36,
	0x10, 0x0a, 0x12, 0x49, 0x0a, 0x45, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58,
	0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x45, 0x32, 0x35, 0x36, 0x56, 0x31, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x0b, 0x12, 0x49, 0x0a,
	0x45, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x50, 0x52,
	0x49, 0x4d, 0x45, 0x32, 0x35, 0x36, 0x56, 0x31, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x0c, 0x12, 0x48, 0x0a, 0x44, 0x43, 0x53, 0x52, 0x53,
	0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34,
	0x52, 0x31, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x32, 0x35, 0x36,
	0x10, 0x0d, 0x12, 0x48, 0x0a, 0x44, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58,
	0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x52, 0x31, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x0e, 0x12, 0x48, 0x0a, 0x44,
	0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x50, 0x33, 0x38, 0x34, 0x52, 0x31, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32,
	0x5f, 0x35, 0x31, 0x32, 0x10, 0x0f, 0x12, 0x48, 0x0a, 0x44, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49,
	0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x35, 0x32, 0x31, 0x52, 0x31,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x10,
	0x12, 0x48, 0x0a, 0x44, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30,
	0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x50, 0x35, 0x32, 0x31, 0x52, 0x31, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53,
	0x48, 0x41, 0x5f, 0x32, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x11, 0x12, 0x48, 0x0a, 0x44, 0x43, 0x53,
	0x52, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x35,
	0x32, 0x31, 0x52, 0x31, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x5f, 0x35,
	0x31, 0x32, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x53, 0x52, 0x53, 0x55, 0x49, 0x54, 0x45,
	0x5f, 0x58, 0x35, 0x30, 0x39, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x44, 0x44, 0x53, 0x41, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x13, 0x2a, 0x4e,
	0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x35, 0x30, 0x39, 0x10, 0x01, 0x2a, 0x95,
	0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x52, 0x54, 0x10, 0x03, 0x32, 0xbb, 0x01, 0x0a, 0x05, 0x43, 0x65, 0x72, 0x74, 0x7a,
	0x12, 0x59, 0x0a, 0x06, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x6e, 0x73,
	0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0e, 0x43,
	0x61, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x12, 0x21, 0x2e,
	0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x61, 0x6e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x67, 0x6e, 0x73, 0x69, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x7a, 0x2e, 0x43, 0x61,
	0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e,
	0x73, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0xd2, 0x3e, 0x05, 0x30, 0x2e, 0x32, 0x2e, 0x30, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openconfig_gnsi_certz_certz_proto_rawDescOnce sync.Once
	file_github_com_openconfig_gnsi_certz_certz_proto_rawDescData = file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc
)

func file_github_com_openconfig_gnsi_certz_certz_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_gnsi_certz_certz_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_gnsi_certz_certz_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openconfig_gnsi_certz_certz_proto_rawDescData)
	})
	return file_github_com_openconfig_gnsi_certz_certz_proto_rawDescData
}

var file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_github_com_openconfig_gnsi_certz_certz_proto_goTypes = []interface{}{
	(CSRSuite)(0),                           // 0: gnsi.certz.CSRSuite
	(CertificateType)(0),                    // 1: gnsi.certz.CertificateType
	(CertificateEncoding)(0),                // 2: gnsi.certz.CertificateEncoding
	(*RotateCertificateRequest)(nil),        // 3: gnsi.certz.RotateCertificateRequest
	(*RotateCertificateResponse)(nil),       // 4: gnsi.certz.RotateCertificateResponse
	(*FinalizeRequest)(nil),                 // 5: gnsi.certz.FinalizeRequest
	(*CSRParams)(nil),                       // 6: gnsi.certz.CSRParams
	(*CanGenerateCSRRequest)(nil),           // 7: gnsi.certz.CanGenerateCSRRequest
	(*CanGenerateCSRResponse)(nil),          // 8: gnsi.certz.CanGenerateCSRResponse
	(*Certificate)(nil),                     // 9: gnsi.certz.Certificate
	(*CertificateBundle)(nil),               // 10: gnsi.certz.CertificateBundle
	(*CertificateRevocationList)(nil),       // 11: gnsi.certz.CertificateRevocationList
	(*CertificateRevocationListBundle)(nil), // 12: gnsi.certz.CertificateRevocationListBundle
	(*Entity)(nil),                          // 13: gnsi.certz.Entity
	(*UploadRequest)(nil),                   // 14: gnsi.certz.UploadRequest
	(*UploadResponse)(nil),                  // 15: gnsi.certz.UploadResponse
	(*CertificateSigningRequest)(nil),       // 16: gnsi.certz.CertificateSigningRequest
	(*GenerateCSRRequest)(nil),              // 17: gnsi.certz.GenerateCSRRequest
	(*GenerateCSRResponse)(nil),             // 18: gnsi.certz.GenerateCSRResponse
}
var file_github_com_openconfig_gnsi_certz_certz_proto_depIdxs = []int32{
	17, // 0: gnsi.certz.RotateCertificateRequest.generate_csr:type_name -> gnsi.certz.GenerateCSRRequest
	14, // 1: gnsi.certz.RotateCertificateRequest.certificates:type_name -> gnsi.certz.UploadRequest
	5,  // 2: gnsi.certz.RotateCertificateRequest.finalize_rotation:type_name -> gnsi.certz.FinalizeRequest
	18, // 3: gnsi.certz.RotateCertificateResponse.generated_csr:type_name -> gnsi.certz.GenerateCSRResponse
	15, // 4: gnsi.certz.RotateCertificateResponse.certificates:type_name -> gnsi.certz.UploadResponse
	0,  // 5: gnsi.certz.CSRParams.csr_suite:type_name -> gnsi.certz.CSRSuite
	6,  // 6: gnsi.certz.CanGenerateCSRRequest.params:type_name -> gnsi.certz.CSRParams
	1,  // 7: gnsi.certz.Certificate.type:type_name -> gnsi.certz.CertificateType
	2,  // 8: gnsi.certz.Certificate.encoding:type_name -> gnsi.certz.CertificateEncoding
	9,  // 9: gnsi.certz.CertificateBundle.certificates:type_name -> gnsi.certz.Certificate
	1,  // 10: gnsi.certz.CertificateRevocationList.type:type_name -> gnsi.certz.CertificateType
	2,  // 11: gnsi.certz.CertificateRevocationList.encoding:type_name -> gnsi.certz.CertificateEncoding
	11, // 12: gnsi.certz.CertificateRevocationListBundle.certificate_revocation_lists:type_name -> gnsi.certz.CertificateRevocationList
	9,  // 13: gnsi.certz.Entity.certificate:type_name -> gnsi.certz.Certificate
	10, // 14: gnsi.certz.Entity.trust_bundle:type_name -> gnsi.certz.CertificateBundle
	12, // 15: gnsi.certz.Entity.certificate_revocation_list_bundle:type_name -> gnsi.certz.CertificateRevocationListBundle
	13, // 16: gnsi.certz.UploadRequest.entities:type_name -> gnsi.certz.Entity
	1,  // 17: gnsi.certz.CertificateSigningRequest.type:type_name -> gnsi.certz.CertificateType
	2,  // 18: gnsi.certz.CertificateSigningRequest.encoding:type_name -> gnsi.certz.CertificateEncoding
	6,  // 19: gnsi.certz.GenerateCSRRequest.params:type_name -> gnsi.certz.CSRParams
	16, // 20: gnsi.certz.GenerateCSRResponse.certificate_signing_request:type_name -> gnsi.certz.CertificateSigningRequest
	3,  // 21: gnsi.certz.Certz.Rotate:input_type -> gnsi.certz.RotateCertificateRequest
	7,  // 22: gnsi.certz.Certz.CanGenerateCSR:input_type -> gnsi.certz.CanGenerateCSRRequest
	4,  // 23: gnsi.certz.Certz.Rotate:output_type -> gnsi.certz.RotateCertificateResponse
	8,  // 24: gnsi.certz.Certz.CanGenerateCSR:output_type -> gnsi.certz.CanGenerateCSRResponse
	23, // [23:25] is the sub-list for method output_type
	21, // [21:23] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_gnsi_certz_certz_proto_init() }
func file_github_com_openconfig_gnsi_certz_certz_proto_init() {
	if File_github_com_openconfig_gnsi_certz_certz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanGenerateCSRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanGenerateCSRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRevocationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRevocationListBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateSigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateCSRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RotateCertificateRequest_GenerateCsr)(nil),
		(*RotateCertificateRequest_Certificates)(nil),
		(*RotateCertificateRequest_FinalizeRotation)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RotateCertificateResponse_GeneratedCsr)(nil),
		(*RotateCertificateResponse_Certificates)(nil),
	}
	file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Entity_Certificate)(nil),
		(*Entity_TrustBundle)(nil),
		(*Entity_CertificateRevocationListBundle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openconfig_gnsi_certz_certz_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_gnsi_certz_certz_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_gnsi_certz_certz_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_gnsi_certz_certz_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_gnsi_certz_certz_proto = out.File
	file_github_com_openconfig_gnsi_certz_certz_proto_rawDesc = nil
	file_github_com_openconfig_gnsi_certz_certz_proto_goTypes = nil
	file_github_com_openconfig_gnsi_certz_certz_proto_depIdxs = nil
}
